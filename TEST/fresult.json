{
    "easy": [
        {
            "id": 1,
            "result": "A            【4分。答错倒扣3分】"
        },
        {
            "id": 2,
            "result": "防止代码登录。      【言之有理即4分】"
        },
        {
            "id": 3,
            "result": "error      【4分。答错倒扣3分，思路等如果意思是编译错误，算对】"
        },
        {
            "id": 4,
            "result": "double          【4分】"
        },
        {
            "id": 5,
            "result": "0          【4分】"
        },
        {
            "id": 6,
            "result": "固态，固态，机械          【4分】"
        },
        {
            "id": 7,
            "result": "B          【4分】"
        },
        {
            "id": 8,
            "result": "c           【4分】"
        },
        {
            "id": 9,
            "result": "D           【4分】"
        },
        {
            "id": 10,
            "result": "26          【4分，答错倒扣2分】"
        }
    ],
    "middle": [
        {
            "id": 11,
            "result": "2 3 12445   【8分。前两个每个2分，第三个空写12345得2分，答对4分】"
        },
        {
            "id": 12,
            "result": "a=3,b=7,c=9   【8分。c答对2分，其他两个每个3分】"
        },
        {
            "id": 13,
            "result": "输出no  【3分】\n 先运算&& 再按照从左到右运算||【5分】"
        },
        {
            "id": 14,
            "result": "x>=1 && x<=5;x==y && y==z  【每个4分】"
        }
    ],
    "diff": [
        {
            "id": 15,
            "result": "ACE，其中D error    【8分。答对一个2分，每个错答扣2分 扣完6分为止】"
        },
        {
            "id": 16,
            "result": "0 5      【每个4分】"
        },
        {
            "id": 17,
            "result": "10 4      【每个4分】"
        },
        {
            "id": 18,
            "result": "2 1 4  【3+3+2分】"
        },
        {
            "id": 19,
            "result": "20 6     【2+1分】    \n 20 1 【1+2分】"
        },
        {
            "id": 20,
            "result": "int i;\nfor(i=0;i<5;i++)\n    a[i]=1;  //或*(a+i)=1;如果有其他操作，拿不准的还是运行一下吧。检查结果的语句：#include<stdio.h>\n#include<stdlib.h>\nint main()\n{    int *a=（int*）malloc(5*sizeof(int));\n    //此处填写答案    int i;\n    for(i=0;i<5;i++)\n        printf(\"%d\",a[i]);\n//如果输出五个1，则答案正确}"
        },
        {
            "id": 21,
            "result": "0 6 0 【每个2分】"
        },
        {
            "id": 22,
            "result": "strcmp或者手写代码按字节比较都行 【6分】"
        },
        {
            "id": 23,
            "result": "定义一个指向函数的指针;定义一个指向int指针的指针;定义一个返回值为int指针的函数  【每个2分】"
        },
        {
            "id": 24,
            "result": "20    【6分】"
        },
        {
            "id": 25,
            "result": "1 2   【6分】"
        },
        {
            "id": 26,
            "result": " 1 0.0    【6分】"
        },
        {
            "id": 27,
            "result": "8 【6分】"
        },
        {
            "id": 28,
            "result": "1 0.0   【6分。不管小数点的数值全都答对得6分，只对一个不得分，小数点值1分】"
        },
        {
            "id": 29,
            "result": "2.0 2   【6分。不管小数点的数值全都答对得6分，数值只对一个不得分，小数点值1分】"
        },
        {
            "id": 30,
            "result": "10.0  【6分。不管小数点的数值答对得满分，小数点值1分】"
        },
        {
            "id": 31,
            "result": "5   【6分】"
        },
        {
            "id": 32,
            "result": "#include\"1.c\" \n  【3分】      #ifdef asd\n    printf(\"1\");\n#else\n    printf(\"2\");\n#endif  【3分】"
        },
        {
            "id": 33,
            "result": "4315   【6分】"
        },
        {
            "id": 34,
            "result": "#define max(x,y) ((x)>(y)?(x)：(y)) 【6分。要加必要的括号  缺少必要的括号扣2分】"
        },
        {
            "id": 35,
            "result": "【9分】"
        },
        {
            "id": 36,
            "result": "实际上镜子并没有颠倒左右，而是颠倒前后    （言之有理即可）  【9分】"
        },
        {
            "id": 37,
            "result": "【9分】"
        },
        {
            "id": 38,
            "result": "正四面体，立体种树   【9分】"
        },
        {
            "id": 39,
            "result": "【满分23分】 1次\n第1个瓶子取1个硬币\n第2个取2个硬币\n......\n第10个取10个硬币\n将这55个称出来重量，如果都是10g的硬币，重量应为550g，缺多少个0.1g，就是第几个瓶子。  【9分】"
        },
        {
            "id": 40,
            "result": "【满分20分】循环次数在30以内（单层循环）得满分\n2层循环，（优化的很好）最高14分，（没有优化10分）\n3层循环最高8分\n思路的时间复杂度最重要，看其程序完整程度再酌情给分。\n最优解：\n#include<stdio.h>\nint main()\n{\n    int i,j,k;\n    for(k=0;k<13;k++)\n    {\n         j=50-4*k;\n         i=50-j-k;\n         printf(\"%d %d %d\n\",i,j,k);\n    }\n}\n输出答案：\n0 50 0\n3 46 1\n6 42 2\n9 38 3\n12 34 4\n15 30 5\n18 26 6\n21 22 7\n24 18 8\n27 14 9\n30 10 10\n33 6 11\n36 2 12\n"
        },
        {
            "id": 41,
            "result": "【满分23分】常规二层循环，单层排序是亮点。单层循环得满分,二层循环最高16分"
        },
        {
            "id": 42,
            "result": "【满分23分】 使用递推满分\n使用递归最高19分\n程序错误酌情给分\n程序错误知道使用递归也可以适当提高分数\n思路如果写对状态转移方程可适当提高分数\n"
        },
        {
            "id": 43,
            "result": "【15分】略"
        },
        {
            "id": 44,
            "result": "【15分】溢出后"
        },
        {
            "id": 45,
            "result": "【15分】A：递归"
        }
    ]
}